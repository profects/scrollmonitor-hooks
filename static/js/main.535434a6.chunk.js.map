{"version":3,"sources":["App.js","scrollmonitor-hooks.js","serviceWorker.js","index.js"],"names":["attrs","defaultState","isInViewport","isFullyInViewport","isAboveViewport","isBelowViewport","top","bottom","height","WatchedElement","_ref","className","index","ref","useRef","scrollState","arguments","length","undefined","_ref$offsets","offsets","_ref$scrollMonitorCon","scrollMonitorContainer","scrollmonitor","current","_useState","useState","_useState2","Object","slicedToArray","state","updateState","updateCheck","useLayoutEffect","watcher","create","createUpdatedState","reduce","acc","attr","on","destory","objectSpread","useScrollMonitor","react_default","a","createElement","concat","count","parseInt","window","location","search","substr","arr","i","push","App","href","map","App_WatchedElement","key","Component","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8KAyBA,kHCtBMA,EAAQ,CACb,eACA,oBACA,kBACA,kBACA,MACA,SACA,UAGKC,EAAe,CACpBC,aAAc,EACdC,kBAAmB,EACnBC,gBAAiB,EACjBC,gBAAiB,EACjBC,IAAK,EACLC,OAAQ,EACRC,OAAQ,GDhBHC,SAAiB,SAAAC,GAAa,IAI9BC,EAJmBC,EAAWF,EAAXE,MACjBC,EAAMC,iBAAO,MACbC,ECiBwB,SAACF,GAA8D,IAAAH,EAAAM,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAP,GAAOG,EAAAT,EAAxDU,eAAwD,IAAAD,EAAhD,EAAgDA,EAAAE,EAAAX,EAA7CY,8BAA6C,IAAAD,EAAtBE,IAAsBF,EACxFG,EAAYX,EAAZW,QADwFC,EAEjEC,mBAASzB,GAFwD0B,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAEvFK,EAFuFH,EAAA,GAEhFI,EAFgFJ,EAAA,GAIxFK,EAAiC,kBAAZZ,EACxB,CAACI,EAASJ,GACV,CAACI,EAASJ,EAAQd,IAAKc,EAAQb,QA4BlC,OA1BA0B,0BAAgB,WACf,GAAgB,OAAZT,EAAJ,CAKA,IAAMU,EAAUZ,EAAuBa,OAAOX,EAASJ,GAEjDgB,EAAqB,WAC1B,OAAOpC,EAAMqC,OAAO,SAACC,EAAKC,GAEzB,OADAD,EAAIC,GAAQL,EAAQK,GACbD,GACL,KASJ,OANAJ,EAAQM,GAAG,cAAe,WACzBT,EAAYK,OAGbL,EAAYK,KAEL,WACNF,EAAQO,WApBRV,EAAYH,OAAAc,EAAA,EAAAd,CAAA,GAAI3B,KAsBf+B,GAEIF,EDnDca,CAAiB9B,GAarC,OAVKE,EAAYb,aAENa,EAAYZ,kBACrBQ,EAAY,KACHI,EAAYX,gBACrBO,EAAY,gBACHI,EAAYV,kBACrBM,EAAY,iBANZA,EAAY,GASPiC,EAAAC,EAAAC,cAAA,QAAMnC,UAAS,OAAAoC,OAASpC,GAAaE,IAAKA,GAAMD,KAGnDoC,EAAQC,SAASC,OAAOC,SAASC,OAAOC,OAAO,KAAO,IAEtDC,EAAM,GACHC,EAAE,EAAGA,EAAIP,EAAOO,IACvBD,EAAIE,KAAKD,OA4CIE,mLAvCX,OACEb,EAAAC,EAAAC,cAAA,OAAKnC,UAAU,OACbiC,EAAAC,EAAAC,cAAA,UAAQnC,UAAU,cAChBiC,EAAAC,EAAAC,cAAA,KAAGY,KAAK,kDAAR,uBADF,OAGEd,EAAAC,EAAAC,cAAA,WAHF,gBAKEF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,8EACAF,EAAAC,EAAAC,cAAA,ugBAsBFF,EAAAC,EAAAC,cAAA,WACGQ,EAAIK,IAAI,SAAAJ,GAAC,OAAIX,EAAAC,EAAAC,cAACc,EAAD,CAAgBC,IAAKN,EAAG3C,MAAO2C,eAlCrCO,aEjBEC,QACW,cAA7Bb,OAAOC,SAASa,UAEe,UAA7Bd,OAAOC,SAASa,UAEhBd,OAAOC,SAASa,SAASC,MACvB,2DCZNC,IAASC,OAAOvB,EAAAC,EAAAC,cAACsB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.535434a6.chunk.js","sourcesContent":["import React, { Component, useRef } from 'react';\nimport { useScrollMonitor } from './scrollmonitor-hooks';\nimport './App.css';\n\nconst WatchedElement = ({index}) => {\n  const ref = useRef(null);\n  const scrollState = useScrollMonitor(ref);\n\n  let className;\n  if (!scrollState.isInViewport) {\n    className = '';\n  } else if (scrollState.isFullyInViewport) {\n    className = 'in';\n  } else if (scrollState.isAboveViewport) {\n    className = 'partial-above';\n  } else if (scrollState.isBelowViewport) {\n    className = 'partial-below';\n  }\n\n  return <span className={`box ${className}`} ref={ref}>{index}</span>\n}\n\nconst count = parseInt(window.location.search.substr(1)) || 300;\n\nconst arr = [];\nfor (let i=0; i < count; i++) {\n  arr.push(i);\n}\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <a href=\"https://github.com/stutrek/scrollmonitor-hooks\">scrollmonitor-hooks</a>\n          demo\n          <br />\n          (scroll down)\n          <br />\n          <small>add ?1000 to the end of the URL to change the number of boxes.\n          <code>{`\nconst WatchedElement = ({index}) => {\n  const ref = useRef(null);\n  const scrollState = useScrollMonitor(ref);\n\n  let className;\n  if (!scrollState.isInViewport) {\n    className = '';\n  } else if (scrollState.isFullyInViewport) {\n    className = 'in';\n  } else if (scrollState.isAboveViewport) {\n    className = 'partial-above';\n  } else if (scrollState.isBelowViewport) {\n    className = 'partial-below';\n  }\n\n  return <span className={\\`box \\${className}\\`} ref={ref}>{index}</span>\n}`}\n          </code>\n</small>\n\n        </header>\n        <div>\n          {arr.map(i => <WatchedElement key={i} index={i} />)}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import { useLayoutEffect, useState } from 'react';\nimport scrollmonitor from 'scrollmonitor';\n\nconst attrs = [\n\t'isInViewport',\n\t'isFullyInViewport',\n\t'isAboveViewport',\n\t'isBelowViewport',\n\t'top',\n\t'bottom',\n\t'height',\n];\n\nconst defaultState = {\n\tisInViewport: 0,\n\tisFullyInViewport: 0,\n\tisAboveViewport: 0,\n\tisBelowViewport: 0,\n\ttop: 0,\n\tbottom: 0,\n\theight: 0,\n};\n\nexport const useScrollMonitor = (ref, {offsets=0, scrollMonitorContainer=scrollmonitor}={}) => {\n\tlet { current } = ref;\n\tconst [state, updateState] = useState(defaultState);\n\n\tconst updateCheck = typeof offsets === 'number'\n\t\t? [current, offsets]\n\t\t: [current, offsets.top, offsets.bottom];\n\n\tuseLayoutEffect(() => {\n\t\tif (current === null) {\n\t\t\tupdateState({...defaultState});\n\t\t\treturn;\n\t\t}\n\n\t\tconst watcher = scrollMonitorContainer.create(current, offsets);\n\n\t\tconst createUpdatedState = () => {\n\t\t\treturn attrs.reduce((acc, attr) => {\n\t\t\t\tacc[attr] = watcher[attr]; \n\t\t\t\treturn acc;\n\t\t\t}, {});\n\t\t};\n\n\t\twatcher.on('stateChange', () => {\n\t\t\tupdateState(createUpdatedState());\n\t\t});\n\n\t\tupdateState(createUpdatedState());\n\n\t\treturn () => {\n\t\t\twatcher.destory();\n\t\t};\n\t}, updateCheck);\n\n\treturn state;\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}