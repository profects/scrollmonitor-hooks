(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{11:function(e,t,n){e.exports=n(19)},17:function(e,t,n){},18:function(e,t,n){},19:function(e,t,n){"use strict";n.r(t);for(var o=n(0),r=n.n(o),a=n(2),l=n.n(a),i=(n(17),n(3)),s=n(4),c=n(8),u=n(5),p=n(9),m=n(10),f=n(7),w=n(6),b=n.n(w),d=["isInViewport","isFullyInViewport","isAboveViewport","isBelowViewport","top","bottom","height"],h={isInViewport:0,isFullyInViewport:0,isAboveViewport:0,isBelowViewport:0,top:0,bottom:0,height:0},v=(n(18),function(e){var t,n=e.index,a=Object(o.useRef)(null),l=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.offsets,r=void 0===n?0:n,a=t.scrollMonitorContainer,l=void 0===a?b.a:a,i=e.current,s=Object(o.useState)(h),c=Object(f.a)(s,2),u=c[0],p=c[1],w="number"===typeof r?[i,r]:[i,r.top,r.bottom];return Object(o.useLayoutEffect)(function(){if(null!==i){var e=l.create(i,r),t=function(){return d.reduce(function(t,n){return t[n]=e[n],t},{})};return e.on("stateChange",function(){p(t())}),p(t()),function(){e.destory()}}p(Object(m.a)({},h))},w),u}(a);return l.isInViewport?l.isFullyInViewport?t="in":l.isAboveViewport?t="partial-above":l.isBelowViewport&&(t="partial-below"):t="",r.a.createElement("span",{className:"box ".concat(t),ref:a},n)}),V=parseInt(window.location.search.substr(1))||300,E=[],y=0;y<V;y++)E.push(y);var g=function(e){function t(){return Object(i.a)(this,t),Object(c.a)(this,Object(u.a)(t).apply(this,arguments))}return Object(p.a)(t,e),Object(s.a)(t,[{key:"render",value:function(){return r.a.createElement("div",{className:"App"},r.a.createElement("header",{className:"App-header"},r.a.createElement("a",{href:"https://github.com/stutrek/scrollmonitor-hooks"},"scrollmonitor-hooks"),"demo",r.a.createElement("br",null),"(scroll down)",r.a.createElement("br",null),r.a.createElement("small",null,"add ?1000 to the end of the URL to change the number of boxes.",r.a.createElement("br",null),r.a.createElement("code",null,"\nconst WatchedElement = ({index}) => {\n  const ref = useRef(null);\n  const scrollState = useScrollMonitor(ref);\n\n  let className;\n  if (!scrollState.isInViewport) {\n    className = '';\n  } else if (scrollState.isFullyInViewport) {\n    className = 'in';\n  } else if (scrollState.isAboveViewport) {\n    className = 'partial-above';\n  } else if (scrollState.isBelowViewport) {\n    className = 'partial-below';\n  }\n\n  return <span className={`box ${className}`} ref={ref}>{index}</span>\n}"))),r.a.createElement("div",null,E.map(function(e){return r.a.createElement(v,{key:e,index:e})})))}}]),t}(o.Component);Boolean("localhost"===window.location.hostname||"[::1]"===window.location.hostname||window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));l.a.render(r.a.createElement(g,null),document.getElementById("root")),"serviceWorker"in navigator&&navigator.serviceWorker.ready.then(function(e){e.unregister()})}},[[11,1,2]]]);
//# sourceMappingURL=main.29567f4a.chunk.js.map