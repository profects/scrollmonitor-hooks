{"version":3,"sources":["App.js","scrollmonitor-hooks.js","serviceWorker.js","index.js"],"names":["attrs","defaultState","isInViewport","isFullyInViewport","isAboveViewport","isBelowViewport","top","bottom","height","ScrollContainerContext","createContext","scrollmonitor","useScrollState","ref","offsets","arguments","length","undefined","_useState3","useState","_useState4","Object","slicedToArray","state","updateState","_useState5","stateChange","watcher","reduce","acc","attr","createUpdatedState","callbacks","current","_useState","_useState2","waitCount","updateWaitCount","scrollMonitorContainer","useContext","updateCheck","useLayoutEffect","create","_loop","eventName","on","update","triggerCallbacks","destroy","useScrollMonitor","WatchedElement","_ref","className","index","useRef","scrollState","react_default","a","createElement","concat","count","parseInt","window","location","search","substr","inContainer","indexOf","arr","i","push","Component","Boxes","map","App_WatchedElement","key","BoxesInContainer","React","forwardRef","props","container","_useState7","_useState8","setContainer","_useState9","_useState10","createContainer","useScrollContainer","Provider","value","assign","App","href","App_Boxes","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.94c9402e.chunk.js","sourcesContent":["import React, { Component, useRef } from 'react';\nimport { useScrollState, withScrollContainer } from './scrollmonitor-hooks';\nimport './App.css';\n\nconst WatchedElement = ({index}) => {\n  const ref = useRef(null);\n  const scrollState = useScrollState(ref);\n\n  let className;\n  if (!scrollState.isInViewport) {\n    className = '';\n  } else if (scrollState.isFullyInViewport) {\n    className = 'in';\n  } else if (scrollState.isAboveViewport) {\n    className = 'partial-above';\n  } else if (scrollState.isBelowViewport) {\n    className = 'partial-below';\n  }\n\n  return <span className={`box ${className}`} ref={ref}>{index}</span>\n}\n\nconst count = parseInt(window.location.search.substr(1)) || 300;\nconst inContainer = window.location.search.indexOf('boxed') !== -1;\n\nconst arr = [];\nfor (let i=0; i < count; i++) {\n  arr.push(i);\n}\n\nconst Boxes = () => <div>\n  {arr.map(i => <WatchedElement key={i} index={i} />)}\n</div>;\n\nconst BoxesInContainer = withScrollContainer(React.forwardRef((props, ref) => <div ref={ref} className=\"shorty\">\n  {arr.map(i => <WatchedElement key={i} index={i} />)}\n</div>));\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <a href=\"https://github.com/stutrek/scrollmonitor-hooks\">scrollmonitor-hooks</a>\n          <small>add ?1000 to the end of the URL to change the number of boxes.\n          <br />\n          <small>(scroll down)</small>\n          <br/>\n          <code>{`\nconst WatchedElement = ({index}) => {\n\n  const ref = useRef(null);\n  const scrollState = useScrollState(ref);\n\n  let className;\n  if (!scrollState.isInViewport) {\n    className = '';\n  } else if (scrollState.isFullyInViewport) {\n    className = 'in';\n  } else if (scrollState.isAboveViewport) {\n    className = 'partial-above';\n  } else if (scrollState.isBelowViewport) {\n    className = 'partial-below';\n  }\n\n  return <span className={\\`box \\${className}\\`} ref={ref}>{index}</span>\n}`}\n          </code>\n</small>\n\n        </header>\n        {inContainer ? <BoxesInContainer /> : <Boxes />}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { useLayoutEffect, useState, useRef, useContext, createContext } from 'react';\nimport scrollmonitor from 'scrollmonitor';\n\nconst attrs = [\n\t'isInViewport',\n\t'isFullyInViewport',\n\t'isAboveViewport',\n\t'isBelowViewport',\n\t'top',\n\t'bottom',\n\t'height',\n];\n\nconst defaultState = {\n\tisInViewport: 0,\n\tisFullyInViewport: 0,\n\tisAboveViewport: 0,\n\tisBelowViewport: 0,\n\ttop: 0,\n\tbottom: 0,\n\theight: 0,\n};\n\nconst ScrollContainerContext = createContext(scrollmonitor);\n\nexport const useScrollMonitor = (ref, callbacks, offsets=0) => {\n\tlet { current } = ref;\n\tconst [waitCount, updateWaitCount] = useState(0);\n\tconst scrollMonitorContainer = useContext(ScrollContainerContext);\n\n\tconst updateCheck = typeof offsets === 'number'\n\t\t? [current, callbacks, scrollMonitorContainer, offsets]\n\t\t: [current, callbacks, scrollMonitorContainer, offsets.top, offsets.bottom];\n\n\tuseLayoutEffect(() => {\n\t\tif (current === null) {\n\t\t\tupdateWaitCount(waitCount+1);\n\t\t\treturn;\n\t\t}\n\n\t\tconst watcher = scrollMonitorContainer.create(current, offsets);\n\n\t\tfor (let eventName in callbacks) {\n\t\t\twatcher.on(eventName, () => callbacks[eventName](watcher));\n\t\t\twatcher.update();\n\t\t\twatcher.triggerCallbacks();\n\t\t\tif (callbacks.stateChange) {\n\t\t\t\tcallbacks.stateChange(watcher);\n\t\t\t}\n\t\t}\n\n\t\treturn () => {\n\t\t\twatcher.destroy();\n\t\t};\n\t}, updateCheck);\n\n\treturn;\n};\n\nconst createUpdatedState = (watcher) => {\n\treturn attrs.reduce((acc, attr) => {\n\t\tacc[attr] = watcher[attr]; \n\t\treturn acc;\n\t}, {});\n};\n\nexport const useScrollState = (ref, offsets=0) => {\n\tconst [state, updateState] = useState(defaultState);\n\tconst [callbacks] = useState({\n\t\tstateChange: (watcher) => {\n\t\t\tupdateState(createUpdatedState(watcher));\n\t\t}\n\t});\n\n\tuseScrollMonitor(ref, callbacks, offsets);\n\n\treturn state;\n};\n\nconst useScrollContainer = (ref) => {\n\tconst [container, setContainer] = useState(scrollmonitor);\n\tconst [waitCount, updateWaitCount] = useState(0);\n\n\tuseLayoutEffect(() => {\n\t\tif (ref.current === null) {\n\t\t\tupdateWaitCount(waitCount+1);\n\t\t\treturn;\n\t\t}\n\t\tsetContainer(scrollmonitor.createContainer(ref.current));\n\t}, [ref.current]);\n\n\treturn container;\n};\n\nexport const withScrollContainer = Component => props => {\n\tconst ref = useRef(null);\n\tconst container = useScrollContainer(ref);\n\treturn <ScrollContainerContext.Provider value={container}>\n\t\t<Component ref={ref} {...props} />\n\t</ScrollContainerContext.Provider>;\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}