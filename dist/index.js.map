{"version":3,"sources":["../index.js"],"names":["useLayoutEffect","useState","scrollmonitor","attrs","defaultState","isInViewport","isFullyInViewport","isAboveViewport","isBelowViewport","top","bottom","height","useScrollMonitor","ref","offsets","scrollMonitorContainer","current","state","updateState","updateCheck","watcher","create","createUpdatedState","reduce","acc","attr","on","destory"],"mappings":";;AAAA,SAASA,eAAT,EAA0BC,QAA1B,QAA0C,OAA1C;AACA,OAAOC,aAAP,MAA0B,eAA1B;;AAEA,MAAMC,QAAQ,CACb,cADa,EAEb,mBAFa,EAGb,iBAHa,EAIb,iBAJa,EAKb,KALa,EAMb,QANa,EAOb,QAPa,CAAd;;AAUA,MAAMC,eAAe;AACpBC,eAAc,CADM;AAEpBC,oBAAmB,CAFC;AAGpBC,kBAAiB,CAHG;AAIpBC,kBAAiB,CAJG;AAKpBC,MAAK,CALe;AAMpBC,SAAQ,CANY;AAOpBC,SAAQ;AAPY,CAArB;;AAUA,OAAO,MAAMC,mBAAmB,CAACC,GAAD,EAAM,EAACC,UAAQ,CAAT,EAAYC,yBAAuBb,aAAnC,KAAkD,EAAxD,KAA+D;AAC9F,KAAI,EAAEc,OAAF,KAAcH,GAAlB;AACA,OAAM,CAACI,KAAD,EAAQC,WAAR,IAAuBjB,SAASG,YAAT,CAA7B;;AAEA,OAAMe,cAAc,OAAOL,OAAP,KAAmB,QAAnB,GACjB,CAACE,OAAD,EAAUF,OAAV,CADiB,GAEjB,CAACE,OAAD,EAAUF,QAAQL,GAAlB,EAAuBK,QAAQJ,MAA/B,CAFH;;AAIAV,iBAAgB,MAAM;AACrB,MAAIgB,YAAY,IAAhB,EAAsB;AACrBE,4BAAgBd,YAAhB;AACA;AACA;;AAED,QAAMgB,UAAUL,uBAAuBM,MAAvB,CAA8BL,OAA9B,EAAuCF,OAAvC,CAAhB;;AAEA,QAAMQ,qBAAqB,MAAM;AAChC,UAAOnB,MAAMoB,MAAN,CAAa,CAACC,GAAD,EAAMC,IAAN,KAAe;AAClCD,QAAIC,IAAJ,IAAYL,QAAQK,IAAR,CAAZ;AACA,WAAOD,GAAP;AACA,IAHM,EAGJ,EAHI,CAAP;AAIA,GALD;;AAOAJ,UAAQM,EAAR,CAAW,aAAX,EAA0B,MAAM;AAC/BR,eAAYI,oBAAZ;AACA,GAFD;;AAIAJ,cAAYI,oBAAZ;;AAEA,SAAO,MAAM;AACZF,WAAQO,OAAR;AACA,GAFD;AAGA,EAxBD,EAwBGR,WAxBH;;AA0BA,QAAOF,KAAP;AACA,CAnCM","file":"index.js","sourcesContent":["import { useLayoutEffect, useState } from 'react';\nimport scrollmonitor from 'scrollmonitor';\n\nconst attrs = [\n\t'isInViewport',\n\t'isFullyInViewport',\n\t'isAboveViewport',\n\t'isBelowViewport',\n\t'top',\n\t'bottom',\n\t'height',\n];\n\nconst defaultState = {\n\tisInViewport: 0,\n\tisFullyInViewport: 0,\n\tisAboveViewport: 0,\n\tisBelowViewport: 0,\n\ttop: 0,\n\tbottom: 0,\n\theight: 0,\n};\n\nexport const useScrollMonitor = (ref, {offsets=0, scrollMonitorContainer=scrollmonitor}={}) => {\n\tlet { current } = ref;\n\tconst [state, updateState] = useState(defaultState);\n\n\tconst updateCheck = typeof offsets === 'number'\n\t\t? [current, offsets]\n\t\t: [current, offsets.top, offsets.bottom];\n\n\tuseLayoutEffect(() => {\n\t\tif (current === null) {\n\t\t\tupdateState({...defaultState});\n\t\t\treturn;\n\t\t}\n\n\t\tconst watcher = scrollMonitorContainer.create(current, offsets);\n\n\t\tconst createUpdatedState = () => {\n\t\t\treturn attrs.reduce((acc, attr) => {\n\t\t\t\tacc[attr] = watcher[attr]; \n\t\t\t\treturn acc;\n\t\t\t}, {});\n\t\t};\n\n\t\twatcher.on('stateChange', () => {\n\t\t\tupdateState(createUpdatedState());\n\t\t});\n\n\t\tupdateState(createUpdatedState());\n\n\t\treturn () => {\n\t\t\twatcher.destory();\n\t\t};\n\t}, updateCheck);\n\n\treturn state;\n};"]}